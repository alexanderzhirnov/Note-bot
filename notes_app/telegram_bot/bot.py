import os
import logging
import hashlib
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from notes_app.models import User, Note, Category, Tag
import datetime
from django.db import models
from typing import Optional
import asyncio
from django.utils import timezone
from asgiref.sync import sync_to_async
from django.conf import settings
from notes_app.telegram_bot.utils import generate_telegram_auth_url

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, token):
        self.token = token
        self.application = None
    
    async def start_polling(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        self.application = Application.builder().token(self.token).build()
        self._register_handlers()
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        while True:
            await asyncio.sleep(3600)

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        handlers = [
            CommandHandler("start", self.start),
            CommandHandler("help", self.help),
            CommandHandler("new", self.new_note),
            CommandHandler("recent", self.recent_notes),
            CommandHandler("search", self.search_notes),
            CommandHandler("set_reminder", self.set_reminder),
            CommandHandler("web_login", self.web_login),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        ]
        for handler in handlers:
            self.application.add_handler(handler)
        self.application.add_error_handler(self.error_handler)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        if user is None:
            return
            
        telegram_id = str(user.id)
        
        user_obj, created = await sync_to_async(User.objects.get_or_create)(
            telegram_id=telegram_id,
            defaults={
                'username': user.username or f"tg_{telegram_id}",
                'first_name': user.first_name or '',
                'last_name': user.last_name or '',
                'telegram_username': user.username,
                'password': None  # –ü–∞—Ä–æ–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Telegram auth
            }
        )
        
        if created:
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∏—Å–ø–æ–ª—å–∑—É–π /web_login"
            )
        else:
            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∏—Å–ø–æ–ª—å–∑—É–π /web_login"
            )
    
    async def web_login(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞"""
        user = await self._get_user(update)
        if user is None:
            return

        web_login_url = generate_telegram_auth_url(user.telegram_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
        await update.message.reply_text(
            text=(
                "üîê <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</b>\n"
                f"<a href='{web_login_url}'>–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</a>\n\n"
                "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç"
            ),
            parse_mode='HTML',
            disable_web_page_preview=True
        )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å timestamp
        timestamp = str(int(timezone.now().timestamp()))
        secret = settings.SECRET_KEY
        token = hashlib.sha256(
            f"{user.telegram_id}{timestamp}{secret}".encode()
        ).hexdigest()

    async def web_login(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:      
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞"""
        user = await self._get_user(update)
        if user is None:
            return

        web_login_url = generate_telegram_auth_url(user.telegram_id)

        await update.message.reply_text(
            "üîê <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</b>\n"
            f"<a href='{web_login_url}'>–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å</a>\n\n"
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç",
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/web_login - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
/recent - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–º–µ—Ç–æ–∫
/search [—Ç–µ–∫—Å—Ç] - –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫
/set_reminder [ID] [–¥–∞—Ç–∞] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        """
        await update.message.reply_text(help_text)
    
    async def new_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new"""
        user = await self._get_user(update)
        if user is None:
            return
            
        context.user_data['creating_note'] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:")
    
    async def recent_notes(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recent"""
        user = await self._get_user(update)
        if user is None:
            return
            
        notes = await sync_to_async(list)(Note.objects.filter(user=user).order_by('-created_at')[:5])
        
        if not notes:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
            return
        
        response = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–º–µ—Ç–æ–∫:\n\n"
        for note in notes:
            response += f"*{note.title}*\n"
            response += f"–°–æ–∑–¥–∞–Ω–æ: {note.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            if note.deadline:
                status = "‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–û" if note.is_overdue else "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ"
                response += f"–°—Ä–æ–∫: {note.deadline.strftime('%Y-%m-%d')} {status}\n"
            tags = await sync_to_async(list)(note.tags.all())
            if tags:
                tag_names = ", ".join(tag.name for tag in tags)
                response += f"–¢–µ–≥–∏: {tag_names}\n"
            response += "\n"
        
        await update.message.reply_text(response)
    
    async def search_notes(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        if not context.args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: /search [—Ç–µ–∫—Å—Ç]")
            return
            
        query = ' '.join(context.args)
        user = await self._get_user(update)
        if user is None:
            return
            
        notes = await sync_to_async(list)(
            Note.objects.filter(
                models.Q(user=user) &
                (models.Q(title__icontains=query) | 
                 models.Q(content__icontains=query) |
                 models.Q(tags__name__icontains=query))
            ).distinct().order_by('-created_at')[:10]
        )
        
        if not notes:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
        for note in notes:
            response += f"*{note.title}*\n"
            response += f"–°–æ–∑–¥–∞–Ω–æ: {note.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            if note.category:
                response += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {note.category.name}\n"
            tags = await sync_to_async(list)(note.tags.all())
            if tags:
                tag_names = ", ".join(tag.name for tag in tags)
                response += f"–¢–µ–≥–∏: {tag_names}\n"
            response += "\n"
        
        await update.message.reply_text(response)
    
    async def set_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_reminder"""
        if len(context.args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_reminder [ID –∑–∞–º–µ—Ç–∫–∏] [–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î]")
            return
        
        note_id = context.args[0]
        date_str = context.args[1]
        user = await self._get_user(update)
        if user is None:
            return
        
        try:
            note = await sync_to_async(Note.objects.get)(id=note_id, user=user)
            deadline = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
            note.deadline = timezone.make_aware(
                datetime.datetime.combine(deadline, datetime.time.min)
            )
            await sync_to_async(note.save)()
            
            await update.message.reply_text(
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ '{note.title}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {deadline.strftime('%Y-%m-%d')}"
            )
        except Note.DoesNotExist:
            await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = await self._get_user(update)
        if user is None or update.message is None:
            return
            
        text = update.message.text
        
        if context.user_data.get('creating_note'):
            if 'note_title' not in context.user_data:
                context.user_data['note_title'] = text
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
            else:
                note = await sync_to_async(Note.objects.create)(
                    title=context.user_data['note_title'],
                    content=text,
                    user=user
                )
                del context.user_data['creating_note']
                del context.user_data['note_title']
                await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∞ '{note.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    
    async def _get_user(self, update: Update) -> Optional[User]:
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        if update.effective_user is None:
            return None
            
        telegram_id = str(update.effective_user.id)
        try:
            return await sync_to_async(User.objects.get)(telegram_id=telegram_id)
        except User.DoesNotExist:
            logger.error(f"User {telegram_id} not found")
            return None

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", exc_info=context.error)
        
        if isinstance(update, Update) and update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )